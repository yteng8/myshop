<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yt.mapper.repository.UserRepository">

    <!-- 根据用户名查找用户 -->
    <select id="findByUsername" resultMap="usermap">
        SELECT system_user.id, system_user.username, system_user.`password`, system_role.rolename
        FROM system_user
        JOIN system_user_role
        on system_user.id = system_user_role.userId
        join system_role
        on system_role.id = system_user_role.roleId
        WHERE system_user.username = #{username}
    </select>
    <resultMap id="usermap" type="com.yt.entity.User">
        <result property="id" column="id"></result>
        <result property="username" column="username"/>
        <result property="password" column="password"/>
        <result property="role" column="rolename"/>
    </resultMap>

    <!-- 根据用户名查询用户是否存在count>0表示存在，count=0表示不存在 -->
    <select id="selectExistUserByUsername" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM system_user
        WHERE username = #{username}
    </select>

    <!-- 插入用户详细信息除了roleName -->
    <insert id="insertSystemUserInfo" parameterType="com.yt.model.system.user.SystemUserInfo" useGeneratedKeys="true" keyProperty="id">
        <selectKey keyProperty="id" resultType="int" order="AFTER">
            select last_insert_id()
        </selectKey>
        insert into system_user(username,system_user.password,system_user.real,age,sex,entryTime) values(#{username},#{password},#{real},#{age},#{sex},#{entryTime})
    </insert>

    <!-- 插入用户所拥有的角色 -->
    <insert id="insertRolename" parameterType="com.yt.model.system.user.Role" useGeneratedKeys="true" keyProperty="id">
        <selectKey keyProperty="id" resultType="int" order="AFTER">
            select last_insert_id()
        </selectKey>
        insert into system_role(rolename) values(#{rolename})
    </insert>

    <!-- 向system_user_role表中插入数据，关联用户表和角色表 -->
    <insert id="insertUserIdAndRoleId" parameterType="java.lang.Integer">
        insert into system_user_role(userId,roleId) values(#{userId},#{roleId})
    </insert>

    <!-- 查询角色名是否存在 -->
    <select id="selectExistRoleName" parameterType="com.yt.model.system.user.Role" resultType="java.lang.Integer">
        <!-- 如果为空则赋值为0 -->
        select IFNULL(MAX(id),0) as id
        from system_role
        where rolename = #{rolename}
    </select>

    <!-- 查询所有的系统用户并封装到模型中 -->
    <select id="selectAllSystemUserInfoByPage" resultMap="rMSelectAllSystemUserInfoByPage">
        SELECT su.id, su.username, su.password, su.real, su.age, su.sex, su.entryTime, sr.rolename as roleName
        FROM system_user su
        join system_user_role sur
        on su.id = sur.userId
        join system_role sr
        on sr.id = sur.roleId
    </select>
    <resultMap id="rMSelectAllSystemUserInfoByPage" type="com.yt.model.system.user.vo.SystemUserInfoVo">
        <result property="id" column="id"></result>
        <result property="username" column="username"></result>
        <result property="password" column="password"></result>
        <result property="real" column="real"></result>
        <result property="age" column="age"></result>
        <result property="sex" column="sex"></result>
        <result property="entryTime" column="entryTime"></result>
        <result property="roleName" column="roleName"></result>
    </resultMap>

    <!-- 更新system_user信息 -->
    <update id="updateSystemInfoToSystemUser" parameterType="com.yt.model.system.user.SystemUserInfo">
        UPDATE system_user set username=#{username}, sex=#{sex}, system_user.real=#{real}, age=#{age}
        where id=#{id}
    </update>

    <!-- 更新system_user_role信息 -->
    <update id="updateSystemInfoToSystemUserRole" parameterType="com.yt.model.system.user.UserRole">
        update system_user_role set roleId=#{roleId}
        where userId=#{userId}
    </update>

    <!-- 根据UserRole模型中的RoleName查询roleId -->
    <select id="selectRoleIdByRoleName" resultType="java.lang.Integer" parameterType="com.yt.model.system.user.UserRole">
        select id
        from system_role
        where rolename=#{roleName}
    </select>

    <!-- 根据userId删除system_user中的数据 -->
    <delete id="deleteSystemInfoToSystemUser" parameterType="java.lang.Integer">
        delete from system_user where id=#{id}
    </delete>
    
    <!-- 根据userId删除system_user_role中的数据 -->
    <delete id="deleteSystemInfoToSystemUserRole" parameterType="java.lang.Integer">
        delete from system_user_role where userId = #{id}
    </delete>

</mapper>